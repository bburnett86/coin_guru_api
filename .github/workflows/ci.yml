name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Update RubyGems to the required version
        run: gem update --system 3.3.22

      - name: Install Dependencies
        run: |
          bundle install --jobs 4 --retry 3
          bundle binstubs railties --force

      - name: Scan for security vulnerabilities
        run: bin/brakeman --no-pager

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Update RubyGems to the required version
        run: gem update --system 3.3.22

      - name: Install Dependencies
        run: |
          bundle install --jobs 4 --retry 3
          bundle binstubs railties --force

      - name: Lint code for style consistency
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest
    env:
      RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
      POSTGRES_HOST: db  
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      COIN_GECKO_API_URL: ${{ secrets.COIN_GECKO_API_URL }}
      COIN_GECKO_API_TOKEN: ${{ secrets.COIN_GECKO_API_TOKEN }}
      DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Environment Variables
        run: |
          echo "POSTGRES_USER: $POSTGRES_USER" | sed 's/./*/g'
          echo "POSTGRES_DB: $POSTGRES_DB" | sed 's/./*/g'
          echo "DATABASE_URL: $(echo $DATABASE_URL | sed 's/./*/g')"

      - name: Verify Secret Presence
        run: |
          if [ -z "$POSTGRES_USER" ]; then echo "POSTGRES_USER is empty"; exit 1; fi
          if [ -z "$POSTGRES_PASSWORD" ]; then echo "POSTGRES_PASSWORD is empty"; exit 1; fi
          if [ -z "$POSTGRES_DB" ]; then echo "POSTGRES_DB is empty"; exit 1; fi

      - name: Increase Swap Memory
        run: |
          sudo fallocate -l 2G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Set up Docker Compose environment
        run: |
          docker-compose -f docker-compose.test.yml build
          docker-compose -f docker-compose.test.yml up -d
          docker-compose -f docker-compose.test.yml ps

      - name: Check database logs
        run: docker-compose -f docker-compose.test.yml logs db --tail=50

      - name: Wait for database readiness
        run: |
          timeout 300s bash -c '
          while ! docker-compose -f docker-compose.test.yml exec -T db \
            pg_isready -h localhost -U "$POSTGRES_USER" -d "$POSTGRES_DB"
          do
            echo "[$(date +%T)] Database not ready. Recent logs:"
            docker-compose -f docker-compose.test.yml logs db --tail=20
            sleep 10
          done'

      - name: Setup Test Database
        run: |
          docker-compose -f docker-compose.test.yml exec -T web bundle exec rails db:create --trace
          
          docker-compose -f docker-compose.test.yml exec -T web bundle exec rails db:migrate --trace
          
          docker-compose -f docker-compose.test.yml exec -T web bundle exec rails db:test:prepare --trace
          
          docker-compose -f docker-compose.test.yml exec -T web bundle exec rails db:version

      - name: Run tests inside Docker
        run: docker-compose -f docker-compose.test.yml exec -T web bundle exec rspec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: tmp/screenshots
          if-no-files-found: ignore

      - name: Stop and clean up containers
        run: docker-compose -f docker-compose.test.yml down