name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Update RubyGems to the required version
        run: gem update --system 3.3.22

      - name: Install Dependencies
        run: |
          bundle install --jobs 4 --retry 3
          bundle binstubs railties --force

      - name: Scan for security vulnerabilities
        run: bin/brakeman --no-pager

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Update RubyGems to the required version
        run: gem update --system 3.3.22

      - name: Install Dependencies
        run: |
          bundle install --jobs 4 --retry 3
          bundle binstubs railties --force

      - name: Lint code for style consistency
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        run: |
          echo "RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}" >> $GITHUB_ENV
          echo "DATABASE_HOST=localhost" >> $GITHUB_ENV
          echo "DATABASE_PORT=5432" >> $GITHUB_ENV
          echo "DATABASE_USERNAME=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "DATABASE_NAME=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "COIN_GECKO_API_TOKEN=${{ secrets.COIN_GECKO_API_TOKEN }}" >> $GITHUB_ENV
          echo "COIN_GECKO_API_URL=${{ secrets.COIN_GECKO_API_URL }}" >> $GITHUB_ENV

      - name: Set up Docker Compose environment for testing
        run: docker-compose -f docker-compose.test.yml up -d --build

      - name: Check running services
        run: docker ps -a

      - name: Reset database (for clean CI runs)
        run: |
          docker-compose -f docker-compose.test.yml exec -T web bundle exec rails db:drop db:create db:migrate db:test:prepare

      - name: Run tests inside Docker
        run: docker-compose -f docker-compose.test.yml exec -T web bundle exec rspec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: tmp/screenshots
          if-no-files-found: ignore

      - name: Stop and clean up containers
        run: docker-compose -f docker-compose.test.yml down
