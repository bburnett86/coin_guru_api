name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Update RubyGems to the required version
        run: gem update --system 3.3.22

      - name: Install Dependencies
        run: |
          bundle install --jobs 4 --retry 3
          bundle binstubs railties --force

      - name: Scan for security vulnerabilities
        run: bin/brakeman --no-pager

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Update RubyGems to the required version
        run: gem update --system 3.3.22

      - name: Install Dependencies
        run: |
          bundle install --jobs 4 --retry 3
          bundle binstubs railties --force

      - name: Lint code for style consistency
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB_TEST: ${{ secrets.POSTGRES_DB_TEST }}
      RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Set up Docker Compose environment for testing
        run: docker-compose --env-file .env.test -f docker-compose.test.yml up -d --build

      - name: Wait for services to be ready
        run: |
          timeout 60s bash -c 'until docker-compose -f docker-compose.test.yml exec -T db pg_isready -U $POSTGRES_USER -d $POSTGRES_DB_TEST; do sleep 2; done'

      - name: Drop and create database
        run: |
          docker-compose -f docker-compose.test.yml exec -T web bundle exec rails db:drop db:create db:migrate db:test:prepare

      - name: Run tests inside Docker
        run: docker-compose -f docker-compose.test.yml exec -T web bundle exec rspec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: tmp/screenshots
          if-no-files-found: ignore

      - name: Stop and clean up containers
        run: docker-compose -f docker-compose.test.yml down
