name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Update RubyGems to the required version
        run: gem update --system 3.3.22

      - name: Install Dependencies
        run: |
          bundle install --jobs 4 --retry 3
          bundle binstubs railties --force

      - name: Scan for security vulnerabilities
        run: bin/brakeman --no-pager

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version

      - name: Update RubyGems to the required version
        run: gem update --system 3.3.22

      - name: Install Dependencies
        run: |
          bundle install --jobs 4 --retry 3
          bundle binstubs railties --force

      - name: Lint code for style consistency
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start PostgreSQL container
        run: |
          docker run -d \
            --name postgres \
            -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            -p 5432:5432 \
            --health-cmd "pg_isready -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }}" \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 5 \
            postgres:17

      - name: Wait for PostgreSQL to be ready
        run: |
          timeout 60s bash -c 'until docker exec postgres pg_isready -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }}; do sleep 2; done'

      - name: Set up Docker Compose environment for testing
        run: docker-compose -f docker-compose.test.yml up -d --build

      - name: Check running services
        run: docker ps -a

      - name: Reset database (for clean CI runs)
        run: |
          docker-compose -f docker-compose.test.yml exec -T web bundle exec rails db:drop db:create db:migrate db:test:prepare

      - name: Run tests inside Docker
        run: docker-compose -f docker-compose.test.yml exec -T web bundle exec rspec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: tmp/screenshots
          if-no-files-found: ignore

      - name: Stop and clean up containers
        run: |
          docker-compose -f docker-compose.test.yml down
          docker stop postgres
          docker rm postgres